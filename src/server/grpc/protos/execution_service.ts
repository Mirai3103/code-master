// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: src/server/grpc/protos/execution_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientReadableStream,
  type handleServerStreamingCall,
  makeGenericClientConstructor,
  Metadata,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "";

export interface SubmissionSettings {
  withTrim: boolean;
  withCaseSensitive: boolean;
  withWhitespace: boolean;
}

export interface Language {
  sourceFileExt: string;
  binaryFileExt: string;
  compileCommand: string;
  runCommand: string;
}

export interface SubmissionResult {
  submissionId: string;
  testCaseId: string;
  status: string;
  stdout: string;
  memoryUsageInKb: number;
  timeUsageInMs: number;
}

export interface TestCase {
  id: string;
  input: string;
  expectOutput: string;
  inputFile: string;
  outputFile: string;
}

export interface Submission {
  id: string;
  language: Language | undefined;
  code: string;
  timeLimitInMs: number;
  memoryLimitInKb: number;
  testCases: TestCase[];
  settings: SubmissionSettings | undefined;
}

function createBaseSubmissionSettings(): SubmissionSettings {
  return { withTrim: false, withCaseSensitive: false, withWhitespace: false };
}

export const SubmissionSettings: MessageFns<SubmissionSettings> = {
  encode(message: SubmissionSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.withTrim !== false) {
      writer.uint32(8).bool(message.withTrim);
    }
    if (message.withCaseSensitive !== false) {
      writer.uint32(16).bool(message.withCaseSensitive);
    }
    if (message.withWhitespace !== false) {
      writer.uint32(24).bool(message.withWhitespace);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubmissionSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubmissionSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.withTrim = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.withCaseSensitive = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.withWhitespace = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubmissionSettings {
    return {
      withTrim: isSet(object.withTrim) ? globalThis.Boolean(object.withTrim) : false,
      withCaseSensitive: isSet(object.withCaseSensitive) ? globalThis.Boolean(object.withCaseSensitive) : false,
      withWhitespace: isSet(object.withWhitespace) ? globalThis.Boolean(object.withWhitespace) : false,
    };
  },

  toJSON(message: SubmissionSettings): unknown {
    const obj: any = {};
    if (message.withTrim !== false) {
      obj.withTrim = message.withTrim;
    }
    if (message.withCaseSensitive !== false) {
      obj.withCaseSensitive = message.withCaseSensitive;
    }
    if (message.withWhitespace !== false) {
      obj.withWhitespace = message.withWhitespace;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubmissionSettings>, I>>(base?: I): SubmissionSettings {
    return SubmissionSettings.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubmissionSettings>, I>>(object: I): SubmissionSettings {
    const message = createBaseSubmissionSettings();
    message.withTrim = object.withTrim ?? false;
    message.withCaseSensitive = object.withCaseSensitive ?? false;
    message.withWhitespace = object.withWhitespace ?? false;
    return message;
  },
};

function createBaseLanguage(): Language {
  return { sourceFileExt: "", binaryFileExt: "", compileCommand: "", runCommand: "" };
}

export const Language: MessageFns<Language> = {
  encode(message: Language, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sourceFileExt !== "") {
      writer.uint32(26).string(message.sourceFileExt);
    }
    if (message.binaryFileExt !== "") {
      writer.uint32(34).string(message.binaryFileExt);
    }
    if (message.compileCommand !== "") {
      writer.uint32(42).string(message.compileCommand);
    }
    if (message.runCommand !== "") {
      writer.uint32(50).string(message.runCommand);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Language {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLanguage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.sourceFileExt = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.binaryFileExt = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.compileCommand = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.runCommand = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Language {
    return {
      sourceFileExt: isSet(object.sourceFileExt) ? globalThis.String(object.sourceFileExt) : "",
      binaryFileExt: isSet(object.binaryFileExt) ? globalThis.String(object.binaryFileExt) : "",
      compileCommand: isSet(object.compileCommand) ? globalThis.String(object.compileCommand) : "",
      runCommand: isSet(object.runCommand) ? globalThis.String(object.runCommand) : "",
    };
  },

  toJSON(message: Language): unknown {
    const obj: any = {};
    if (message.sourceFileExt !== "") {
      obj.sourceFileExt = message.sourceFileExt;
    }
    if (message.binaryFileExt !== "") {
      obj.binaryFileExt = message.binaryFileExt;
    }
    if (message.compileCommand !== "") {
      obj.compileCommand = message.compileCommand;
    }
    if (message.runCommand !== "") {
      obj.runCommand = message.runCommand;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Language>, I>>(base?: I): Language {
    return Language.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Language>, I>>(object: I): Language {
    const message = createBaseLanguage();
    message.sourceFileExt = object.sourceFileExt ?? "";
    message.binaryFileExt = object.binaryFileExt ?? "";
    message.compileCommand = object.compileCommand ?? "";
    message.runCommand = object.runCommand ?? "";
    return message;
  },
};

function createBaseSubmissionResult(): SubmissionResult {
  return { submissionId: "", testCaseId: "", status: "", stdout: "", memoryUsageInKb: 0, timeUsageInMs: 0 };
}

export const SubmissionResult: MessageFns<SubmissionResult> = {
  encode(message: SubmissionResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.submissionId !== "") {
      writer.uint32(10).string(message.submissionId);
    }
    if (message.testCaseId !== "") {
      writer.uint32(18).string(message.testCaseId);
    }
    if (message.status !== "") {
      writer.uint32(26).string(message.status);
    }
    if (message.stdout !== "") {
      writer.uint32(34).string(message.stdout);
    }
    if (message.memoryUsageInKb !== 0) {
      writer.uint32(45).float(message.memoryUsageInKb);
    }
    if (message.timeUsageInMs !== 0) {
      writer.uint32(53).float(message.timeUsageInMs);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubmissionResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubmissionResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.submissionId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.testCaseId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.stdout = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 45) {
            break;
          }

          message.memoryUsageInKb = reader.float();
          continue;
        }
        case 6: {
          if (tag !== 53) {
            break;
          }

          message.timeUsageInMs = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubmissionResult {
    return {
      submissionId: isSet(object.submissionId) ? globalThis.String(object.submissionId) : "",
      testCaseId: isSet(object.testCaseId) ? globalThis.String(object.testCaseId) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      stdout: isSet(object.stdout) ? globalThis.String(object.stdout) : "",
      memoryUsageInKb: isSet(object.memoryUsageInKb) ? globalThis.Number(object.memoryUsageInKb) : 0,
      timeUsageInMs: isSet(object.timeUsageInMs) ? globalThis.Number(object.timeUsageInMs) : 0,
    };
  },

  toJSON(message: SubmissionResult): unknown {
    const obj: any = {};
    if (message.submissionId !== "") {
      obj.submissionId = message.submissionId;
    }
    if (message.testCaseId !== "") {
      obj.testCaseId = message.testCaseId;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.stdout !== "") {
      obj.stdout = message.stdout;
    }
    if (message.memoryUsageInKb !== 0) {
      obj.memoryUsageInKb = message.memoryUsageInKb;
    }
    if (message.timeUsageInMs !== 0) {
      obj.timeUsageInMs = message.timeUsageInMs;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubmissionResult>, I>>(base?: I): SubmissionResult {
    return SubmissionResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubmissionResult>, I>>(object: I): SubmissionResult {
    const message = createBaseSubmissionResult();
    message.submissionId = object.submissionId ?? "";
    message.testCaseId = object.testCaseId ?? "";
    message.status = object.status ?? "";
    message.stdout = object.stdout ?? "";
    message.memoryUsageInKb = object.memoryUsageInKb ?? 0;
    message.timeUsageInMs = object.timeUsageInMs ?? 0;
    return message;
  },
};

function createBaseTestCase(): TestCase {
  return { id: "", input: "", expectOutput: "", inputFile: "", outputFile: "" };
}

export const TestCase: MessageFns<TestCase> = {
  encode(message: TestCase, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.input !== "") {
      writer.uint32(18).string(message.input);
    }
    if (message.expectOutput !== "") {
      writer.uint32(26).string(message.expectOutput);
    }
    if (message.inputFile !== "") {
      writer.uint32(34).string(message.inputFile);
    }
    if (message.outputFile !== "") {
      writer.uint32(42).string(message.outputFile);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestCase {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestCase();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.input = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.expectOutput = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.inputFile = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.outputFile = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TestCase {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      input: isSet(object.input) ? globalThis.String(object.input) : "",
      expectOutput: isSet(object.expectOutput) ? globalThis.String(object.expectOutput) : "",
      inputFile: isSet(object.inputFile) ? globalThis.String(object.inputFile) : "",
      outputFile: isSet(object.outputFile) ? globalThis.String(object.outputFile) : "",
    };
  },

  toJSON(message: TestCase): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.input !== "") {
      obj.input = message.input;
    }
    if (message.expectOutput !== "") {
      obj.expectOutput = message.expectOutput;
    }
    if (message.inputFile !== "") {
      obj.inputFile = message.inputFile;
    }
    if (message.outputFile !== "") {
      obj.outputFile = message.outputFile;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TestCase>, I>>(base?: I): TestCase {
    return TestCase.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TestCase>, I>>(object: I): TestCase {
    const message = createBaseTestCase();
    message.id = object.id ?? "";
    message.input = object.input ?? "";
    message.expectOutput = object.expectOutput ?? "";
    message.inputFile = object.inputFile ?? "";
    message.outputFile = object.outputFile ?? "";
    return message;
  },
};

function createBaseSubmission(): Submission {
  return {
    id: "",
    language: undefined,
    code: "",
    timeLimitInMs: 0,
    memoryLimitInKb: 0,
    testCases: [],
    settings: undefined,
  };
}

export const Submission: MessageFns<Submission> = {
  encode(message: Submission, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.language !== undefined) {
      Language.encode(message.language, writer.uint32(18).fork()).join();
    }
    if (message.code !== "") {
      writer.uint32(26).string(message.code);
    }
    if (message.timeLimitInMs !== 0) {
      writer.uint32(32).int32(message.timeLimitInMs);
    }
    if (message.memoryLimitInKb !== 0) {
      writer.uint32(40).int32(message.memoryLimitInKb);
    }
    for (const v of message.testCases) {
      TestCase.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.settings !== undefined) {
      SubmissionSettings.encode(message.settings, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Submission {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubmission();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.language = Language.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.code = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.timeLimitInMs = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.memoryLimitInKb = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.testCases.push(TestCase.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.settings = SubmissionSettings.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Submission {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      language: isSet(object.language) ? Language.fromJSON(object.language) : undefined,
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      timeLimitInMs: isSet(object.timeLimitInMs) ? globalThis.Number(object.timeLimitInMs) : 0,
      memoryLimitInKb: isSet(object.memoryLimitInKb) ? globalThis.Number(object.memoryLimitInKb) : 0,
      testCases: globalThis.Array.isArray(object?.testCases)
        ? object.testCases.map((e: any) => TestCase.fromJSON(e))
        : [],
      settings: isSet(object.settings) ? SubmissionSettings.fromJSON(object.settings) : undefined,
    };
  },

  toJSON(message: Submission): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.language !== undefined) {
      obj.language = Language.toJSON(message.language);
    }
    if (message.code !== "") {
      obj.code = message.code;
    }
    if (message.timeLimitInMs !== 0) {
      obj.timeLimitInMs = Math.round(message.timeLimitInMs);
    }
    if (message.memoryLimitInKb !== 0) {
      obj.memoryLimitInKb = Math.round(message.memoryLimitInKb);
    }
    if (message.testCases?.length) {
      obj.testCases = message.testCases.map((e) => TestCase.toJSON(e));
    }
    if (message.settings !== undefined) {
      obj.settings = SubmissionSettings.toJSON(message.settings);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Submission>, I>>(base?: I): Submission {
    return Submission.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Submission>, I>>(object: I): Submission {
    const message = createBaseSubmission();
    message.id = object.id ?? "";
    message.language = (object.language !== undefined && object.language !== null)
      ? Language.fromPartial(object.language)
      : undefined;
    message.code = object.code ?? "";
    message.timeLimitInMs = object.timeLimitInMs ?? 0;
    message.memoryLimitInKb = object.memoryLimitInKb ?? 0;
    message.testCases = object.testCases?.map((e) => TestCase.fromPartial(e)) || [];
    message.settings = (object.settings !== undefined && object.settings !== null)
      ? SubmissionSettings.fromPartial(object.settings)
      : undefined;
    return message;
  },
};

export type ExecutionServiceService = typeof ExecutionServiceService;
export const ExecutionServiceService = {
  execute: {
    path: "/ExecutionService/Execute",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: Submission) => Buffer.from(Submission.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Submission.decode(value),
    responseSerialize: (value: SubmissionResult) => Buffer.from(SubmissionResult.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SubmissionResult.decode(value),
  },
} as const;

export interface ExecutionServiceServer extends UntypedServiceImplementation {
  execute: handleServerStreamingCall<Submission, SubmissionResult>;
}

export interface ExecutionServiceClient extends Client {
  execute(request: Submission, options?: Partial<CallOptions>): ClientReadableStream<SubmissionResult>;
  execute(
    request: Submission,
    metadata?: Metadata,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<SubmissionResult>;
}

export const ExecutionServiceClient = makeGenericClientConstructor(
  ExecutionServiceService,
  "ExecutionService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): ExecutionServiceClient;
  service: typeof ExecutionServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
